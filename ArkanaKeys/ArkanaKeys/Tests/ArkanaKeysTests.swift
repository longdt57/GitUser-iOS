// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x7f, 0x8b, 0x87, 0x77, 0x8d, 0xd7, 0xd2, 0x32, 0x7b, 0x53, 0x16, 0x71, 0x99, 0xb7, 0xc8, 0x7, 0x10, 0xe5, 0x85, 0xf5, 0x33, 0x52, 0x87, 0xf7, 0x3c, 0xb1, 0xa6, 0x69, 0x7f, 0x76, 0xaa, 0x69, 0xb9, 0x20, 0x10, 0xa4, 0x2b, 0xc, 0xd4, 0xc1, 0x20, 0xca, 0xb, 0x81, 0x74, 0x47, 0xde, 0x3c, 0xb8, 0x99, 0x12, 0x30, 0x2, 0xef, 0xc1, 0x2, 0xc6, 0x9c, 0x75, 0x8e, 0x88, 0x19, 0x96, 0xd1
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x46, 0xbb, 0xe5, 0x46, 0xe8, 0xe2, 0xe3, 0x1, 0x4c, 0x60, 0x24, 0x49, 0xa9, 0xd5, 0xf1, 0x30, 0x25, 0xdd, 0xe0, 0xc2, 0, 0x62, 0xb0, 0x94, 0x5d, 0x84, 0xc4, 0x5c, 0x4d, 0x15, 0x9f, 0xb, 0xdc, 0x17, 0x23, 0xc2, 0x48, 0x3b, 0xe5, 0xa5, 0x19, 0xf9, 0x6a, 0xb1, 0x17, 0x77, 0xe8, 0x8, 0x8f, 0xab, 0x22, 0x5, 0x66, 0x8a, 0xf8, 0x35, 0xa7, 0xa5, 0x16, 0xea, 0xea, 0x2b, 0xf4, 0xe6, 0x1e, 0xee, 0xbe, 0x4f, 0xbc, 0xe7, 0xe6, 0x3, 0x4c, 0x31, 0x23, 0x40, 0xfb, 0x87, 0xf9, 0x63, 0x23, 0xd7, 0xe4, 0xcd, 0x57, 0x66, 0xb5, 0xc7, 0x5, 0xd4, 0x90, 0xb, 0x1a, 0x12, 0x9a, 0xa, 0xd8, 0x12, 0x74, 0x94, 0x1c, 0x38, 0xe6, 0xf7, 0x19, 0xa8, 0x39, 0xe7, 0x42, 0x74, 0xe6, 0xe, 0xdb, 0xad, 0x2b, 0x4, 0x64, 0x8d, 0xa7, 0x60, 0xa3, 0xac, 0x11, 0xb9, 0xee, 0x28, 0xf0, 0xe2
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "90b1e51373280b9758e7307ca5b52c5be73fc71d93a0c0647205de97a9cdb2b7ae9810417b51b01d32a8d4209e6bed0ca2d074269b2f6382c494fbfbe0d7f1f3")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x46, 0xee, 0xe2, 0, 0xe4, 0xe3, 0xe6, 0, 0xb, 0x3e, 0x53, 0x43, 0xdd, 0xd3, 0x86, 0x40, 0x58, 0xa4, 0xdf, 0xa6, 0x41, 0x4, 0xc4, 0x8f, 0x50, 0xe5, 0xd2, 0x5c, 0x25, 0x17, 0x9d, 0x18, 0xde, 0x59, 0x7c, 0xd1, 0x7c, 0x3c, 0xe0, 0xa8, 0x64, 0x9f, 0x58, 0xf3, 0x30, 0x74, 0x87, 0x5e, 0xff, 0xf0, 0x64, 0x55, 0x36, 0xdb, 0x8b, 0x56, 0xb5, 0xa5, 0x5a, 0xda, 0xde, 0x53, 0xe1, 0xa8, 0x39, 0xd8, 0xef, 0x45, 0xf9, 0x85, 0xe6, 0x44, 0x1c, 0x3c, 0x7b, 0x1b, 0xc8, 0xd5, 0xf0, 0x45, 0x7f, 0x8d, 0xfc, 0xcc, 0x65, 0x35, 0xba, 0xca
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "9eewi442pmE2DdNGHAZSrVCxlTt5Za7qgyluW04iDUSrD3YbGive44JTs9/TVJwyFSh2tR4vgomjQb8Bohy9Vg==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x1e, 0xb9, 0xb7, 0x16, 0xbd, 0xb2, 0xb1, 0x53, 0x56, 0x64, 0x2e, 0x45, 0xf8, 0x9a, 0xfc, 0x62, 0x76, 0xdd, 0xa8, 0x97, 0x56, 0x30, 0xb3, 0xda, 0x4, 0x81, 0x91, 0x8, 0x1b, 0x12, 0x99, 0x51, 0x8f, 0x19, 0x75, 0xc6
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "a20a0eca-784a-4ef8-beb4-807add3869eb")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0xb, 0xf9, 0xf2, 0x12
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x19, 0xea, 0xeb, 0x4, 0xe8
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x4b, 0xb9
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x4f, 0xbb, 0xb7, 0x46
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x46, 0xb9, 0xb5, 0x44, 0xbe, 0xe0, 0xe0, 0x2, 0x48, 0x65, 0x2e, 0x44, 0xad, 0x80, 0xff, 0x32, 0x28, 0xd5, 0xb2, 0xcc, 0x1, 0x60, 0xb4, 0xc4, 0xb, 0x83, 0x96, 0x5a, 0x49, 0x4e, 0x9f, 0x5d, 0x8e, 0x17, 0x25, 0x9c, 0x1b, 0x3b
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x52, 0xbf, 0xb5
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x4c, 0xa5, 0xb6, 0x43
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0xd, 0xee, 0xe6, 0x1b, 0xd2, 0xf3, 0xbe, 0x5b, 0x16, 0xc, 0x65, 0x19, 0xf8, 0xd3, 0xb1
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
