// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x7f, 0x8b, 0x87, 0x77, 0x8d, 0xd7, 0xd2, 0x32, 0x7b, 0x53, 0x16, 0x71, 0x99, 0xb7, 0xc8, 0x7, 0x10, 0xe5, 0x85, 0xf5, 0x33, 0x52, 0x87, 0xf7, 0x3c, 0xb1, 0xa6, 0x69, 0x7f, 0x76, 0xaa, 0x69, 0xb9, 0x20, 0x10, 0xa4, 0x2b, 0xc, 0xd4, 0xc1, 0x20, 0xca, 0xb, 0x81, 0x74, 0x47, 0xde, 0x3c, 0xb8, 0x99, 0x12, 0x30, 0x2, 0xef, 0xc1, 0x2, 0xc6, 0x9c, 0x75, 0x8e, 0x88, 0x19, 0x96, 0xd1
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
